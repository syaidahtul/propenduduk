<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    					http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-4.2.xsd">

	<http auto-config="false" use-expressions="true"
		entry-point-ref="authenticationEntryPoint">
		<intercept-url pattern="/login" access="permitAll" />
		<intercept-url pattern="/register" access="permitAll" />
		<intercept-url pattern="/secured/**" access="isAuthenticated() and @customAuthorizationManager.isAuthorized(authentication, request)" />
		<!-- Allow all other requests. In a real application you should adopt a 
			whitelisting approach where access is not allowed by default -->
		<intercept-url pattern="/**" access="permitAll" />
		<logout invalidate-session="true" logout-url="/logout"
			success-handler-ref="customLogoutSuccessHandler" delete-cookies="JSESSIONID" />
		<custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER" />
		<custom-filter ref="customListFilter" position="BASIC_AUTH_FILTER" />
		<session-management invalid-session-url="/">
			<concurrency-control max-sessions="1"
				error-if-maximum-exceeded="true" session-registry-alias="sessionRegistry" />
		</session-management>
		<access-denied-handler ref="customAccessDeniedHandler"/>
	</http>

	<beans:bean id="customAccessDeniedHandler" class="app.core.security.CustomAccessDeniedHandler">
		<beans:constructor-arg value="/unauthorized" />	
	</beans:bean>

	<!-- The AuthenticationEntryPoint is responsible for redirecting the user 
		to a particular page, like a login page, whenever the server sends back a 
		response requiring authentication -->
	<!-- See Spring-Security Reference 5.4.1 for more info -->
	<beans:bean id="authenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:constructor-arg value="/login" />
	</beans:bean>

	<beans:bean id="customListFilter" class="app.core.security.auth.CustomListFilter">
		<beans:property name="filterList">
			<beans:list>
				<beans:ref bean="customAuthorizationFilter" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean id="customAuthorizationFilter"
		class="app.core.security.auth.CustomAuthorizationFilter">
		<beans:constructor-arg value="/secured" />
		<beans:property name="authorizationManager" ref="customAuthorizationManager" />
	</beans:bean>

	<!-- Custom filter for username and password. The real customization is 
		done in the customAthenticationManager -->
	<beans:bean id="authenticationFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
		p:authenticationManager-ref="customAuthenticationManager"
		p:authenticationFailureHandler-ref="customAuthenticationFailureHandler"
		p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler" />


	<!-- We just actually need to set the default failure url here -->
	<beans:bean id="customAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
		p:defaultFailureUrl="/loginfailed" />

	<!-- We just actually need to set the default target url here -->
	<beans:bean id="customAuthenticationSuccessHandler"
		class="app.core.security.auth.CustomLoginSuccessHandler"
		p:defaultTargetUrl="/secured" />

	<beans:bean id="customLogoutSuccessHandler"
		class="app.core.security.auth.CustomLogoutSuccessHandler"
		p:defaultTargetUrl="/" />

	<beans:bean id="httpSessionCreatedListener"
		class="app.core.security.listener.HttpSessionCreatedListener" />

	<beans:bean id="httpSessionDestroyedListener"
		class="app.core.security.listener.HttpSessionDestroyedListener" />

	<authentication-manager />

</beans:beans>